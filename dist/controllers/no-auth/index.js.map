{"version":3,"sources":["../../../src/controllers/no-auth/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAI,MAAM,GAAG,sBAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;;AAG1C,IAAM,MAAM,GAAG,IAAI,kBAAQ,MAAM,EAAE;;;;AAAC,AAIpC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAChB,IAAI,CAAC,YAAY,CAAC,CAAC;;AAExB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAChB,GAAG,CAAC,OAAO,CAAC,CACZ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;;;;AAAC,AAI3C,SAAS,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAClC,QAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE;AACf,cAAM,IAAI,gBAAM,eAAe,CAAC,8BAA8B,CAAC,CAAC;KACnE;;AAED,mBAAY,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAC3B,IAAI,CAAC,UAAC,YAAY,EAAK;AACpB,eAAO,GAAG,CAAC,KAAK,CAAC,YAAY,EAAE,sBAAY,YAAY,CAAC,CAAC;KAC5D,CAAC,CAAC;CACV;;AAED,SAAS,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE;;;;;AAKxB,WAAO,eAAY,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAChC,IAAI,CAAC,UAAC,WAAW,EAAK;AACnB,eAAO,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;KAC1C,CAAC,CAAC;CACV;;AAED,SAAS,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE;;;;;AAKvB,WAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;;AAEvB,QAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE;AAChB,cAAM,IAAI,gBAAM,eAAe,CAAC,0BAA0B,CAAC,CAAC;KAC/D;;AAED,WAAO,eAAY,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CACpC,IAAI,CAAC,UAAC,IAAI,EAAK;AACZ,eAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAClB,WAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACnB,CAAC,CAAC;CACV;;kBAEc,MAAM","file":"index.js","sourcesContent":["import express from 'express';\nimport multer from 'multer';\nimport error from '../../utils/error';\nimport userService from '../../services/user';\nimport fileService from '../../services/file';\nvar upload = multer({ dest: 'uploads/' });\nimport conf from '../../conf';\nimport serializers from '../serializers';\nconst router = new express.Router();\n\n/* ROUTES */\n\nrouter.route('/user')\n    .post(requestToken);\n\nrouter.route('/file')\n    .get(getFile)\n    .post(upload.single('file'), sendFile);\n\n/* METHODS */\n\nfunction requestToken(req, res, next) {\n    if (!req.body.uid) {\n        throw new error.BadRequestError('No uid provided for creation');\n    }\n\n    userService.create(req.body.uid)\n        .then((createdToken) => {\n            return res.shoot(createdToken, serializers.userCreation);\n        });\n}\n\nfunction sendFile(req, res) {\n    /*if (!req.body.uid) {\n     throw new error.BadRequestError('No uid provided for creation');\n     }*/\n\n    return fileService.saveFile(req.file)\n        .then((pidDocument) => {\n            return res.shoot(pidDocument, ['pid']);\n        });\n}\n\nfunction getFile(req, res) {\n    /*if (!req.body.uid) {\n     throw new error.BadRequestError('No uid provided for creation');\n     }*/\n\n    console.log('getFile');\n\n    if (!req.query.pid) {\n        throw new error.BadRequestError('No PID provided for file');\n    }\n\n    return fileService.getFile(req.query.pid)\n        .then((file) => {\n            console.log(file);\n            res.shoot(file);\n        });\n}\n\nexport default router;\n"]}