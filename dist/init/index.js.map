{"version":3,"sources":["../../src/init/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AACvC,eAAW,EAAE,IAAI;CACpB,CAAC,CAAC;;AAEH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;AACvB,WAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC;CAChC;;;;AAAA,AAmBD,OAAO,CAAC,WAAW,CAAC,CAAC;;AAErB,IAAM,WAAW,GAAG,eAAK,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC/C,mBAAS,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEtC,IAAM,MAAM,GAAG,wBAAS,CAAC;;AAEzB,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;;AAE1B,MAAM,CAAC,GAAG,CAAC,qBAAW,IAAI,EAAE,CAAC,CACxB,GAAG,CAAC,qBAAW,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAC/C,GAAG,CAAC,+BAAgB,CAAC;;;;;;;AAAC,AAO3B,MAAM,CAAC,GAAG,uBAAa,CAAC;;AAExB,MAAM,CAAC,KAAK,GAAG,YAAY;AACvB,WAAO,OAAO,CAAC,QAAQ,CAAC,UAAU,QAAQ,EAAE;AACpC,uBAAK,YAAY,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;KAClE,CAAC,CACD,GAAG,CAAC,YAAM;AACP,eAAO,CAAC,GAAG,iBAAe,OAAO,CAAC,GAAG,CAAC,QAAQ,YAAO,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAG,CAAC;KAC9E,CAAC,CAAC;CACV,CAAC;;kBAEa,MAAM","file":"index.js","sourcesContent":["var babel = require('babel-core/register')({\n    retainLines: true\n});\n\nif (!process.env.NODE_ENV) {\n    process.env.NODE_ENV = 'dev';\n}\n\n///////////////////////////////////////////////////////////////////////////// GLOBAL VARS\n\nimport conf from '../conf';\n\nimport express from 'express';\nimport http from 'http';\nimport mongoose from 'mongoose';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\nimport flash from 'flash';\n\nimport methodOverride from 'method-override';\nimport passport from 'passport';\n\nimport controllers from '../controllers';\n\nrequire('./globals');\n\nconst currentConf = conf[process.env.NODE_ENV];\nmongoose.connect(currentConf.mongodb);\n\nconst server = express();\n\nserver.set('port', currentConf.port);\nserver.set('debug', true);\n\nserver.use(bodyParser.json())\n    .use(bodyParser.urlencoded({ extended: false }))\n    .use(methodOverride());\n\n/*server.use(session({secret: currentConf.secretJWT})); // session secret\n server.use(passport.initialize());\n server.use(passport.session()); // persistent login sessions\n server.use(flash()); // use connect-flash for flash messages stored in session*/\n\nserver.use(controllers);\n\nserver.start = function () {\n    return Promise.fromNode(function (callback) {\n            http.createServer(server).listen(server.get('port'), callback);\n        })\n        .tap(() => {\n            console.log(`Running on ${process.env.NODE_ENV} on ${server.get('port')}`);\n        });\n};\n\nexport default server;\n"]}