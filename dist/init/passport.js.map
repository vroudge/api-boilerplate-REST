{"version":3,"sources":["../../src/init/passport.js"],"names":[],"mappings":";;;;;;;;;;;;AAIA,IAAM,aAAa,GAAG,wBAAc,QAAQ;;;;;;AAAC;;AAM7C,MAAM,CAAC,OAAO,GAAG,UAAS,QAAQ,EAAE;;;;;;;;;AASnC,SAAQ,CAAC,cAAc,CAAC,UAAS,KAAK,EAAE,IAAI,EAAE;AAC7C,MAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;EACrB,CAAC;;;AAAC,AAGH,SAAQ,CAAC,gBAAgB,CAAC,UAAS,EAAE,EAAE,IAAI,EAAE;AAC5C,OAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAS,GAAG,EAAE,KAAK,EAAE;AACvC,OAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;GACjB,CAAC,CAAC;EACH,CAAC;;;;;;;;AAAC,AAQH,SAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,4BAAkB;;AAE7C,gBAAc,EAAE,OAAO;AACvB,eAAa,EAAE,UAAU;AACzB,mBAAiB,EAAE,IAAI;AAAA,EACvB,EACD,UAAS,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;;;;AAIpC,SAAO,CAAC,QAAQ,CAAC,YAAW;;;;AAI3B,QAAK,CAAC,OAAO,CAAC,EAAE,aAAa,EAAG,KAAK,EAAE,EAAE,UAAS,GAAG,EAAE,KAAK,EAAE;;AAE7D,QAAI,GAAG,EACN,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAAA,AAGlB,QAAI,KAAK,EAAE;AACV,YAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,eAAe,EAAE,8BAA8B,CAAC,CAAC,CAAC;KACrF,MAAM;;;;AAIN,SAAI,QAAQ,GAAc,IAAI,KAAK,EAAE;;;AAAC,AAGtC,aAAQ,CAAC,KAAK,CAAC,KAAK,GAAM,KAAK,CAAC;AAChC,aAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC;;;AAAC,AAG1D,aAAQ,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE;AAC3B,UAAI,GAAG,EACN,MAAM,GAAG,CAAC;AACX,aAAO,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;MAC5B,CAAC,CAAC;KACH;IAED,CAAC,CAAC;GAEH,CAAC,CAAC;EAEH,CAAC,CAAC,CAAC;CAEL,CAAC","file":"passport.js","sourcesContent":["// config/passport.js\n\n// load all the things we need\nimport LocalStrategy from 'passport-local';\nconst localStrategy = LocalStrategy.Strategy;\n\n// load up the token model\nimport User from '../models/user';\n\n// expose this function to our app using module.exports\nmodule.exports = function(passport) {\n\n\t// =========================================================================\n\t// passport session setup ==================================================\n\t// =========================================================================\n\t// required for persistent login sessions\n\t// passport needs ability to serialize and unserialize tokens out of session\n\n\t// used to serialize the token for the session\n\tpassport.serializetoken(function(token, done) {\n\t\tdone(null, token.id);\n\t});\n\n\t// used to deserialize the token\n\tpassport.deserializetoken(function(id, done) {\n\t\ttoken.findById(id, function(err, token) {\n\t\t\tdone(err, token);\n\t\t});\n\t});\n\n\t// =========================================================================\n\t// LOCAL SIGNUP ============================================================\n\t// =========================================================================\n\t// we are using named strategies since we have one for login and one for signup\n\t// by default, if there was no name, it would just be called 'local'\n\n\tpassport.use('local-signup', new LocalStrategy({\n\t\t\t// by default, local strategy uses tokenname and password, we will override with email\n\t\t\ttokennameField: 'email',\n\t\t\tpasswordField: 'password',\n\t\t\tpassReqToCallback: true // allows us to pass back the entire request to the callback\n\t\t},\n\t\tfunction(req, email, password, done) {\n\n\t\t\t// asynchronous\n\t\t\t// token.findOne wont fire unless data is sent back\n\t\t\tprocess.nextTick(function() {\n\n\t\t\t\t// find a token whose email is the same as the forms email\n\t\t\t\t// we are checking to see if the token trying to login already exists\n\t\t\t\ttoken.findOne({ 'local.email':  email }, function(err, token) {\n\t\t\t\t\t// if there are any errors, return the error\n\t\t\t\t\tif (err)\n\t\t\t\t\t\treturn done(err);\n\n\t\t\t\t\t// check to see if theres already a token with that email\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\treturn done(null, false, req.flash('signupMessage', 'That email is already taken.'));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if there is no token with that email\n\t\t\t\t\t\t// create the token\n\t\t\t\t\t\tvar newtoken            = new token();\n\n\t\t\t\t\t\t// set the token's local credentials\n\t\t\t\t\t\tnewtoken.local.email    = email;\n\t\t\t\t\t\tnewtoken.local.password = newtoken.generateHash(password);\n\n\t\t\t\t\t\t// save the token\n\t\t\t\t\t\tnewtoken.save(function(err) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\treturn done(null, newtoken);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t});\n\n\t\t}));\n\n};\n"]}