{"version":3,"sources":["../../src/init/test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,OAAO,CAAC,WAAW,CAAC;;;AAAC,AAGrB,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;;AAE9B,eAAK,GAAG,0BAAgB,CAAC;AACzB,eAAK,GAAG,0BAAW,CAAC;;AAEpB,MAAM,CAAC,IAAI,iBAAO,CAAC;AACnB,MAAM,CAAC,MAAM,GAAG,eAAK,MAAM,CAAC;AAC5B,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAErC,IAAM,WAAW,GAAG,eAAK,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC/C,mBAAS,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEtC,IAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC;AACjD,IAAM,MAAM,GAAG,wBAAS,CAAC;;AAEzB,MAAM,CAAC,GAAG,CAAC,qBAAW,IAAI,EAAE,CAAC,CACxB,GAAG,CAAC,qBAAW,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAC/C,GAAG,CAAC,+BAAgB,CAAC,CAAC;AAC3B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;AAEnB,MAAM,CAAC,OAAO,GAAG,UAAS,MAAM,EAAE,IAAI,EAA6B;QAA3B,IAAI,yDAAG,IAAI;QAAE,KAAK,yDAAG,IAAI;;AAG7D,WAAO,yBAAU,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;;;;;;;;;CAYzC,CAAC;AAZyC","file":"test.js","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport chaiProps from 'chai-properties';\nimport express from 'express';\nimport supertest from 'supertest';\nimport controllers from '../controllers/index';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport mongoose from 'mongoose';\nimport conf from '../conf';\nrequire('./globals');\n\n//defines that we're running tests\nprocess.env.NODE_ENV = 'test';\n\nchai.use(chaiAsPromised);\nchai.use(chaiProps);\n\nglobal.chai = chai;\nglobal.expect = chai.expect;\nglobal.Promise = require('bluebird');\n\nconst currentConf = conf[process.env.NODE_ENV];\nmongoose.connect(currentConf.mongodb);\n\nconst router = require('../controllers').default;\nconst server = express();\n\nserver.use(bodyParser.json())\n    .use(bodyParser.urlencoded({ extended: false }))\n    .use(methodOverride());\nserver.use(router);\n\nglobal.request = function(method, path, body = null, token = null) {\n\n\n    return supertest(server)[method](path);\n    //if (token) {\n    /*if (_.isString(token)) {\n     req = req.set('Authorization', 'JWT ' + token);\n     } else if (token instanceof models.Token.Instance) {\n     let jwt = token.getEncryptedJwt(conf.jwtSecret);\n     req = req.set('Authorization', 'JWT ' + jwt);\n     } else {\n     throw new Error('Token not supported', token);\n     }*/\n    //}\n\n};\n"]}