{"version":3,"sources":["../../src/utils/securityContext.js"],"names":[],"mappings":";;;;;;;;;;;;;;IACY,MAAM;;;;;;;;IAEG,eAAe;AAEnC,UAFoB,eAAe,GAEV;MAAb,IAAI,yDAAG,IAAI;;wBAFH,eAAe;;AAGlC,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,MAAI,CAAC,KAAK,kBAAQ,CAAC;EACnB;;cALmB,eAAe;;sBAO/B,UAAU,EAAW;qCAAN,IAAI;AAAJ,QAAI;;;AACtB,UAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAC3C,IAAI,CAAC,UAAC,MAAM,EAAK;AACjB,QAAG,MAAM,KAAK,IAAI,EAAE;AACnB,YAAO,IAAI,CAAC;KACZ;AACD,QAAG,MAAM,KAAK,IAAI,EAAE;AACnB,WAAM,IAAI,MAAM,CAAC,WAAW,qCAAkC,UAAU,4BAAwB,CAAC;KACjG;AACD,UAAM,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,IAAO,UAAU,aAAU,CAAC,CAAC;IACnE,CAAC,CAAC;GACJ;;;;;;0BAGO;AACP,UAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GACvC;;;8BAEW,WAAW,EAAE;AACxB,OAAG,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AAC3B,eAAW,GAAG,CAAC,WAAW,CAAC,CAAC;IAC5B;AACD,UAAO,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;GAC9C;;;qCAEkB,WAAW,EAAE;AAC/B,OAAG,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AAC3B,eAAW,GAAG,CAAC,WAAW,CAAC,CAAC;IAC5B;AACD,UAAO,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC;GACrD;;;sCAEmB;AACnB,UAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;GACzE;;;6BAEU;AACV,UAAO,IAAI,CAAC,WAAW,CAAC;GACxB;;;QA7CmB,eAAe;;;kBAAf,eAAe","file":"securityContext.js","sourcesContent":["import roles from './roles';\nimport * as errors from './error';\n\nexport default class SecurityContext {\n\n\tconstructor(user = null) {\n\t\tthis.user = user;\n\t\tthis.roles = roles;\n\t}\n\n\tcan(permission, ...args) {\n\t\treturn this.roles.can(this, permission, args)\n\t\t\t.then((result) => {\n\t\t\t\tif(result === true) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif(result === null) {\n\t\t\t\t\tthrow new errors.ServerError(`No security rule matched for '${permission}', denying by default`);\n\t\t\t\t}\n\t\t\t\tthrow new errors.ForbiddenError(result || `${permission} denied!`);\n\t\t\t});\n\t}\n\n\t// a simple alias of can\n\tcheck() {\n\t\treturn this.can.apply(this, arguments);\n\t}\n\n\tuserHasRole(roleOrRoles) {\n\t\tif(!_.isArray(roleOrRoles)) {\n\t\t\troleOrRoles = [roleOrRoles];\n\t\t}\n\t\treturn this.can('user has role', roleOrRoles);\n\t}\n\n\tapplicationHasRole(roleOrRoles) {\n\t\tif(!_.isArray(roleOrRoles)) {\n\t\t\troleOrRoles = [roleOrRoles];\n\t\t}\n\t\treturn this.can('application has role', roleOrRoles);\n\t}\n\n\tisApplicationOnly() {\n\t\treturn this.application && this.application.hasWhiteRole() && !this.user;\n\t}\n\n\tloggedIn() {\n\t\treturn this.application;\n\t}\n}\n"]}